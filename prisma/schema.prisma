generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ------------------------- Enums Globais ------------------------- */

// Papel GLOBAL, para administração da plataforma
enum SystemRole {
  SUPERADMIN  // pode criar/editar tenants e gerenciar contas
  SUPPORT     // opcional, suporte limitado
  NONE        // padrão para usuários comuns
}

enum TenantRole {
  ADMIN       // dono/administrador do restaurante
  MODERATOR   // gerente/financeiro
  USER        // atendente/garçom
}

/**
 * Orders: status simplificado
 * (ANTES: OPEN, PAID, CANCELED)
 * AGORA:  OPEN, CLOSED, CANCELED
 */
enum OrderStatus {
  OPEN
  CLOSED
  CANCELED
}

/**
 * Itens do pedido: ciclo de vida por item
 * STAGED (carrinho) -> FIRED (produzindo) -> CLOSED | VOID
 */
enum OrderItemStatus {
  STAGED
  FIRED
  CLOSED
  VOID
}

enum PaymentMethod {
  CASH
  CARD
  PIX
  OTHER
}

enum InventoryUnit {
  ML
  L
  UNIT
}

/**
 * Mantemos seus tipos de movimento:
 * - FIRE: usar SALE com qtyDelta negativa
 * - VOID: usar ADJUSTMENT com qtyDelta positiva
 */
enum StockMovementType {
  SALE
  PURCHASE
  ADJUSTMENT
}

enum TransactionType {
  ENTRY
  EXIT
  SANGRIA
  OTHER
}

/** (Opcional) roteamento de produção por estação */
enum PrepStation {
  KITCHEN
  BAR
  DESSERT
  OTHER
}

enum IdempotencyStatus {
  PROCESSING
  SUCCEEDED
  FAILED
  EXPIRED
}

/* ------------------------- Multi-tenant ------------------------- */

model Tenant {
  id               String              @id @default(uuid())
  name             String
  slug             String?             @unique // opcional: subdomínio/identificador estável
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  memberships      UserTenant[]
  categories       Category[]
  products         Product[]
  sales            Sale[]
  financials       FinancialTransaction[]

  // Orders & Estoque
  orders           Order[]
  orderItems       OrderItem[]
  payments         Payment[]
  inventoryItems   InventoryItem[]
  recipes          Recipe[]
  stockMovements   StockMovement[]
}

model User {
  id                       String                    @id @default(uuid())
  name                     String
  email                    String                    @unique
  password                 String
  active                   Boolean                   @default(true)
  systemRole               SystemRole                @default(NONE)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt

  memberships              UserTenant[]
  financialTransactions    FinancialTransaction[]    @relation("UserFinancialTransactions")
  sales                    Sale[]

  // Relações com pedidos
  cashierOrders            Order[]                   @relation("OrderCashierUser")
  createdOrders            Order[]                   @relation("OrderCreatedByUser")   // NEW
  assignedOrders           Order[]                   @relation("OrderAssignedToUser")  // NEW

  // Atores de VOID
  voidRequestedItems       OrderItem[]               @relation("VoidRequestedBy")      // NEW
  voidApprovedItems        OrderItem[]               @relation("VoidApprovedBy")       // NEW
}

model UserTenant {
  // vínculo usuário↔tenant com papel no tenant
  userId      String
  tenantId    String
  role        TenantRole @default(USER)

  user        User   @relation(fields: [userId], references: [id])
  tenant      Tenant @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId]) // evita duplicidade de membership
  @@index([tenantId, role])
}

/* ------------------------- Domínio (por tenant) ------------------------- */

model Category {
  id          String     @id @default(uuid())
  tenantId    String
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  products    Product[]

  @@unique([tenantId, name])
  @@index([tenantId, name])
  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  tenantId    String
  name        String
  description String?
  price       Decimal   @db.Decimal(10, 2)
  cost        Decimal   @db.Decimal(10, 2)
  barcode     String?
  stock       Int       @default(0)  // NOTA: Orders não altera este campo; usa InventoryItem
  isActive    Boolean   @default(true)

  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  saleItems   SaleItem[]
  orderItems  OrderItem[]
  recipe      Recipe?

  @@unique([tenantId, name])
  @@unique([tenantId, barcode])
  @@index([tenantId, name])
  @@index([tenantId, barcode])
  @@map("products")
}

model Sale {
  id         String    @id @default(uuid())
  tenantId   String
  total      Decimal   @db.Decimal(10, 2)
  payment    PaymentMethod
  discount   Decimal?  @db.Decimal(10, 2)
  tax        Decimal?  @db.Decimal(10, 2)
  createdAt  DateTime  @default(now())

  userId     String
  user       User      @relation(fields: [userId], references: [id])

  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  items      SaleItem[]
}

model SaleItem {
  id         String   @id @default(uuid())
  saleId     String
  productId  String
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)

  sale       Sale     @relation(fields: [saleId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model FinancialTransaction {
  id            String        @id @default(uuid())
  tenantId      String
  type          TransactionType
  amount        Decimal       @db.Decimal(10, 2)
  description   String?
  createdAt     DateTime      @default(now())

  createdById   String
  createdBy     User          @relation("UserFinancialTransactions", fields: [createdById], references: [id])

  tenant        Tenant        @relation(fields: [tenantId], references: [id])

  @@index([tenantId, type, createdAt])
}

/* ------------------------- Idempotência ------------------------- */

model IdempotencyKey {
  id                String              @id @default(uuid())
  tenantId          String
  scope             String              // ex.: "orders:create"
  key               String              // UUID v4 gerado pelo cliente
  status            IdempotencyStatus   @default(PROCESSING)
  requestHash       String
  responseCode      Int?
  responseBody      Json?
  responseTruncated Boolean             @default(false)
  resourceType      String?             // ex.: "order"
  resourceId        String?             // id do recurso principal
  errorCode         String?
  errorMessage      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  expiresAt         DateTime            // TTL = now + 48h

  @@unique([tenantId, scope, key])
  @@index([tenantId, scope, key])
}

/* ------------------------- Orders e Pagamentos ------------------------- */

model Order {
  id               String       @id @default(uuid())
  tenantId         String
  status           OrderStatus  @default(OPEN)

  subtotal         Decimal      @db.Decimal(10, 2)
  discount         Decimal?     @db.Decimal(10, 2)
  total            Decimal      @db.Decimal(10, 2)

  tabNumber        String?      // NEW: opcional identificação da comanda/mesa
  idempotencyKey   String?
  version          Int          @default(0) // NEW: optimistic locking

  // Atores
  createdByUserId  String       // NEW: quem abriu a comanda
  assignedToUserId String?      // NEW: garçom responsável atual
  cashierUserId    String?      // (ANTES era obrigatório) agora opcional

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  tenant           Tenant       @relation(fields: [tenantId], references: [id])
  createdByUser    User         @relation("OrderCreatedByUser", fields: [createdByUserId], references: [id])   // NEW
  assignedToUser   User?        @relation("OrderAssignedToUser", fields: [assignedToUserId], references: [id]) // NEW
  cashierUser      User?        @relation("OrderCashierUser", fields: [cashierUserId], references: [id])

  items            OrderItem[]
  payments         Payment[]
  stockMovements   StockMovement[]

  @@index([tenantId, status, createdAt])
  @@unique([tenantId, idempotencyKey])
}

model OrderItem {
  id              String            @id @default(uuid())
  orderId         String
  tenantId        String
  productId       String

  status          OrderItemStatus   @default(STAGED) // NEW
  station         PrepStation?                      // NEW (derivado de produto/categoria)

  quantity        Decimal           @db.Decimal(10, 3)
  unitPrice       Decimal           @db.Decimal(10, 2)
  total           Decimal           @db.Decimal(10, 2)

  notes           String?                           // NEW
  firedAt         DateTime?                         // NEW
  voidedAt        DateTime?                         // NEW
  voidReason      String?                           // NEW
  voidByUserId    String?                           // NEW
  voidApprovedBy  String?                           // NEW
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt      // NEW

  order           Order             @relation(fields: [orderId], references: [id])
  product         Product           @relation(fields: [productId], references: [id])
  tenant          Tenant            @relation(fields: [tenantId], references: [id])

  // Relações de auditoria de VOID
  voidByUser      User?             @relation("VoidRequestedBy", fields: [voidByUserId], references: [id])     // NEW
  voidApprovedByUser User?          @relation("VoidApprovedBy", fields: [voidApprovedBy], references: [id])    // NEW

  @@index([tenantId, orderId])
}

model Payment {
  id         String    @id @default(uuid())
  orderId    String
  tenantId   String
  method     PaymentMethod
  amount     Decimal   @db.Decimal(10, 2)

  order      Order     @relation(fields: [orderId], references: [id])
  tenant     Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, orderId, createdAt])
  createdAt  DateTime  @default(now())              // NEW: padroniza trilha temporal
}

/* ------------------------- Estoque, Receita e Movimentação ------------------------- */

model InventoryItem {
  id            String         @id @default(uuid())
  tenantId      String
  name          String
  unit          InventoryUnit
  factorToBase  Decimal        @db.Decimal(10, 3)
  onHand        Decimal        @db.Decimal(10, 3)
  isIngredient  Boolean        @default(false)

  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  recipeLines   RecipeLine[]
  stockMovements StockMovement[]

  @@unique([tenantId, name])
}

model Recipe {
  id        String    @id @default(uuid())
  productId String    @unique
  tenantId  String

  product   Product   @relation(fields: [productId], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  lines     RecipeLine[]
}

model RecipeLine {
  id              String        @id @default(uuid())
  recipeId        String
  inventoryItemId String
  qtyBase         Decimal       @db.Decimal(10, 3)

  recipe          Recipe        @relation(fields: [recipeId], references: [id])
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
}

model StockMovement {
  id              String            @id @default(uuid())
  tenantId        String
  inventoryItemId String
  type            StockMovementType
  qtyDelta        Decimal           @db.Decimal(10, 3) // negativo = saída (SALE/fire); positivo = entrada (ADJUSTMENT/void)
  relatedOrderId  String?
  reason          String?           // NEW: opcional para rastreabilidade
  createdAt       DateTime          @default(now())

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  inventoryItem   InventoryItem     @relation(fields: [inventoryItemId], references: [id])
  order           Order?            @relation(fields: [relatedOrderId], references: [id])

  @@index([tenantId, inventoryItemId, createdAt])
}
